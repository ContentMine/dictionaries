From Chris Kittel, http://discuss.contentmine.org/t/building-a-new-facet-from-wikidata/237

In this example we generate a list of endangered species form wikidata, and with a few lines of code convert them into a facet that can be used in the ContentMine-API and toolchain.

First we query wikidata for all species that have an IUCN-ID, and download the JSON.

PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>

SELECT ?wikidataID ?term ?termLabel
WHERE
{
    ?wikidataID wdt:P627 ?wd . # find entities that have a IUCN-ID
    ?wikidataID wdt:P105 wd:Q7432 .# ... and have taxon Rank of species
    ?wikidataID wdt:P225 ?term . # also return the scientific name of the taxon
    #?taxon wdt:P1843 ?taxonCommonName # if we want common names, this significantly reduces matches from 78k to 17k, and is not consistent over languages
    SERVICE wikibase:label { bd:serviceParam wikibase:language "en" }
}
ORDER BY ?term

    Download JSON, not Full JSON

With a few lines of Python we add a unique ID within the ContentMine-dictionaries, and output a slightly restructured JSON.

import json

def enrich(termlist, facetname):
    """
    Iterate over a list of terms and add an enumerating identifier.
    """
    return [reformat(d, i, facetname) for i,d in enumerate(termlist) \
                                      if not digit_present(d.get("term"))]

def digit_present(s):
    """
    Returns true for entities that have no common/scientific name in wikidata
    and get assigned something like 't307596644'.
    """
    return any(i.isdigit() for i in s)

def reformat(d, i, facetname):
    """
    Reformats the dictionaries into facets.
    """
    new = {}
    new["term"] = d.get("term")
    new["name"] = d.get("termLabel")
    new["identifiers"] = {}
    # "https://www.wikidata.org/wiki/Q4661045" -> "Q4661045"
    new["identifiers"]["wikidata"] = d.get("wikidataID").split("/")[-1]
    new["identifiers"]["contentmine"] = "CM."+facetname+str(i)
    return new

def make_facet(wikidatajsonpath, facetname):
    """
    Reads downloaded JSON from a wikidata query,
    builds structure around a list of terms,
    returns facet.
    """
    with open(wikidatajsonpath) as infile:
        raw = json.load(infile)
        entries = enrich(raw, facetname)
        facet= {}
        facet["id"] = "CM."+facetname
        facet["name"] = facetname
        facet["entries"] = entries
        return facet

facetname = "facetname" # give an appropriate one, e.g. "endangered"
new_facet = make_facet("path/to/wikidata.json", facetname)

with open("{0}.json".format(facetname), "w") as outfile:
    json.dump(new_facet, outfile)

